---
import { Image } from "astro:assets";
const { images } = Astro.props;
---

<dialog
  id="lightbox"
  class="fixed top-0 left-0 w-screen h-screen bg-black bg-opacity-70 justify-center items-center z-50 p-4 backdrop-blur m-0 hidden"
>
  <span
    id="close-lightbox"
    class="fixed top-0 right-0 mr-5 mt-5 text-4xl text-white">X</span
  >
  {
    images.map((image, index) => (
      <Image
        src={image}
        alt={`Image from foo`}
        widths={[240, 540, 720, 1920, 2048, 4096]}
        format="webp"
        quality={85}
        class="max-w-full max-h-full lightbox-image"
        loading="lazy"
        id={`${index}`}
        lightbox-images
      />
    ))
  }
</dialog>

<script>
  const dialog = document.querySelector("#lightbox");
  const lightboxImages = document.querySelectorAll("[lightbox-images]");
  const closeButton = document.querySelector("#close-lightbox");

  closeButton.addEventListener("click", () => {
    dialog.close();
  });

  const nextPicture = () => {
    const currentImage = document.querySelector("[activeImage]");
    const currentID = parseInt(currentImage.id);
    const nextID = (currentID + 1) % lightboxImages.length;

    lightboxImages.forEach((li) => {
      li.classList.add("hidden");
      li.removeAttribute("activeImage");
    });
    lightboxImages[nextID].classList.toggle("hidden");
    lightboxImages[nextID].setAttribute("activeImage", "");
  };

  const previousPicture = () => {
    const currentImage = document.querySelector("[activeImage]");
    const currentID = parseInt(currentImage.id);
    let nextID = currentID - 1;
    if (nextID < 0) {
      nextID = lightboxImages.length - 1;
    }

    lightboxImages.forEach((li) => {
      li.classList.add("hidden");
      li.removeAttribute("activeImage");
    });
    lightboxImages[nextID].classList.toggle("hidden");
    lightboxImages[nextID].setAttribute("activeImage", "");
  };

  document.addEventListener(
    "keydown",
    (event) => {
      const keyName = event.key;

      if (keyName === "ArrowRight" && dialog.open) {
        nextPicture();
      } else if (keyName === "ArrowLeft" && dialog.open) {
        previousPicture();
      }
    },
    false,
  );

  let touchStartTime, clientX, clientY;

  const touchStart = (e) => {
    // Record the timestamp of the touch event
    touchStartTime = Date.now();

    // Record the X and Y coordinates of the touch on the screen
    clientY = e.touches[0].clientY;
    clientX = e.touches[0].clientX;
  };

  const touchEnd = (e) => {
    // Record the timestamp of the touch end event
    const touchEndTime = Date.now();

    // Call the swipe function to check if a swipe gesture occurred
    swipe(e, touchEndTime - touchStartTime);
  };

  const DURATION_THRESHOLD = 500;
  const MOVE_THRESHOLD = 100;

  const swipe = (e, duration) => {
    // Get the final X and Y coordinates of the touch
    const endClientX = e.changedTouches[0].clientX;
    const endClientY = e.changedTouches[0].clientY;

    // Check if the elapsed time between touchstart and touchend events is less than or equal to the duration threshold
    if (duration <= DURATION_THRESHOLD) {
      // Check if the touch moved at least MOVE_THRESHOLD pixels in the X or Y direction
      if (clientY - endClientY >= MOVE_THRESHOLD) {
        // Swipe up detected
        // Perform any additional code for swipe up here
      } else if (endClientY - clientY >= MOVE_THRESHOLD) {
        // Swipe down detected
        // Perform any additional code for swipe down here
      } else if (endClientX - clientX >= MOVE_THRESHOLD) {
        // Swipe right detected
        previousPicture();
        // Perform any additional code for swipe right here
      } else if (clientX - endClientX >= MOVE_THRESHOLD) {
        // Swipe left detected
        nextPicture();
        // Perform any additional code for swipe left here
      }
    }
  };

  dialog.addEventListener("touchstart", touchStart);
  dialog.addEventListener("touchend", touchEnd);

  let observer = new MutationObserver((event) => {
    if (event[0].attributeName == "open") {
      if (dialog.open) {
        dialog.classList.replace("hidden", "flex");
      } else if (!dialog.open) {
        dialog.classList.replace("flex", "hidden");
      }
    }
  });
  observer.observe(dialog, { attributes: true });
</script>

<style>
  dialog:modal {
    max-width: 100vw;
    max-height: 100vh;
  }
  .lightbox-image {
    width: auto;
    height: auto;
  }
</style>
